{"componentChunkName":"component---src-templates-pattern-js","path":"/iterator/","result":{"data":{"markdownRemark":{"html":"<p>Iterator design pattern can be viewed in two ways:</p>\n<ol>\n<li>Iterator itself as a mechanism of traversing through the data structure (ex: Symbol.Iterator for Array in JS).</li>\n<li>A way to separate the iterator mechanism from the consumer class. The class doesn't care what it has to iterate over.</li>\n</ol>\n<p>In JS, iterators are build-in for most data structures like arrays, sets... (not objects), so here is the example of iterator design pattern as a way to keep the iterator separate from the class that calls the iterator.<br>\nFor more information about iterator mechanism, see resources below:<br>\n<a href=\"https://refactoring.guru/design-patterns/iterator\">RefactoringGuru </a><br>\n<a href=\"https://www.dofactory.com/javascript/iterator-design-pattern\">DoFactory </a></p>","frontmatter":{"title":"Iterator"},"fields":{"slug":"/iterator/"}}},"pageContext":{"slug":"/iterator/"}}}